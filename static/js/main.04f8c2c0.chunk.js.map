{"version":3,"sources":["components/DataFetching.js","components/DataFetchingPost.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","_templateObject","DataFetching","_useState","useState","_useState2","Object","slicedToArray","posts","setPosts","useEffect","fetch","then","response","json","catch","err","console","log","react_default","a","createElement","style","textAlign","map","post","className","key","id","class","title","body","DataFetchingPost","App","components_DataFetching","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8kBAGA,IAAMA,QAAYC,EAAOC,IAAVC,KAkCAC,MAff,WAAwB,IAAAC,EACGC,mBAAS,IADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChBK,EADgBH,EAAA,GACTI,EADSJ,EAAA,GASvB,OAPAK,oBAAU,WACTC,MAAM,8CACLC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACE,GAAD,OAAUL,EAASK,KACxBC,MAAM,SAAAC,GAASC,QAAQC,IAAIF,MAC1B,IAGFG,EAAAC,EAAAC,cAACvB,EAAD,CAAWwB,MAAO,CAACC,UAAU,SAC3Bf,EAAMgB,IAAI,SAAAC,GAAI,OAAIN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OAAOC,IAAKF,EAAKG,IAAIT,EAAAC,EAAAC,cAAA,MAAIQ,MAAM,UAASV,EAAAC,EAAAC,cAAA,QAAMK,UAAU,UAAUD,EAAKG,IAAlD,IAA8DH,EAAKK,OAAWX,EAAAC,EAAAC,cAAA,SAAII,EAAKM,WCDlIC,ICjBAC,mLARb,OACCd,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACdP,EAAAC,EAAAC,cAACa,EAAD,cAJcC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.04f8c2c0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\ndisplay:grid;\ngrid-template-columns: repeat(auto-fit, minmax(19rem,1fr));\n.header{\n\tcolor:#a2a2a2;\n}\n.number{\n\tfont-size:50px;\n\tcolor:#d9d9da;\n}\np{\n\tcolor:#0d73cc;\n}\n.card{\n\tborder: 1px solid #d9d9da;\n\tpadding: 25px;\n}\n`\n\nfunction DataFetching() {\n\tconst [posts, setPosts] = useState([])\n\tuseEffect(() => {\n\t\tfetch('https://jsonplaceholder.typicode.com/posts')\n\t\t.then((response) => response.json())\n\t\t.then((json) => setPosts(json))\n\t\t.catch(err => { console.log(err)})\n\t}, [])\n\n\treturn (\n\t\t<Container style={{textAlign:'left'}}>\n\t\t\t{posts.map(post => <div className=\"card\" key={post.id}><h1 class=\"header\"><span className=\"number\">{post.id}</span> {post.title}</h1><p>{post.body}</p></div>)}\n\t\t</Container> \n\t)\n}\nexport default DataFetching\n","import React, { useState, useEffect } from 'react'\n\nfunction DataFetchingPost() {\n\tconst [posts, setPosts] = useState([])\n\tuseEffect(() => {\n\t\t/// POST\n\t\tfetch('https://jsonplaceholder.typicode.com/posts', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({\n\t\t\t\tuserId: 12,\n\t\t\t\tid: 201,\n\t\t\t\ttitle: \"Samual\",\n\t\t\t\tcompleted: false,\n\t\t\t}),\n\t\t\theaders: {\n\t\t\t  'Content-type': 'text/plain',\n\t\t\t  'access-control-allow-origin': '*',\n\t\t\t  'vary': 'Accept-Encoding'\n\t\t\t},\n\t\t  })\n\t\t.then((response) => response.json())\n\t\t.then((json) => {console.log(json);setPosts(json)})\n\t\t.catch(err => {console.log(err)})\n\t}, [])\n\n\treturn (\n\t\t<div>\n\t\t\t{posts.title}\n\t\t</div>\n\t)\n}\n\nexport default DataFetchingPost;\n","import React, { Component } from 'react'\nimport './App.css'\nimport DataFetching from './components/DataFetching'\nimport DataFetchingPost from './components/DataFetchingPost'\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<DataFetching />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}